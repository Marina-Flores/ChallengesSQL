USE SAMPLEDB
GO


-- Selecting a guid value by using the NEWID function:
SELECT NEWID() AS guid_value;
GO

---------------
CREATE TABLE dbo.subjects1 
(
	subject_id INT IDENTITY,
	subject_name VARCHAR(20),
	global_id UNIQUEIDENTIFIER,
	CONSTRAINT pk_subjects1_subject_id PRIMARY KEY (subject_id)
);
GO

INSERT INTO dbo.subjects1 (subject_name, global_id)
	VALUES ('Biology', NEWID()),
	       ('Physics', NEWID()),
		   ('English', NEWID());
GO

SELECT *
FROM dbo.subjects1;


---------------
CREATE TABLE dbo.subjects2
(
	subject_id INT IDENTITY,
	subject_name VARCHAR(20),
	global_id UNIQUEIDENTIFIER DEFAULT NEWID(),
	CONSTRAINT pk_subjects2_subject_id PRIMARY KEY (subject_id)
);
GO

INSERT INTO dbo.subjects2 (subject_name)
	VALUES ('Biology'),
	       ('Physics'),
		   ('English');
GO


SELECT *
FROM dbo.subjects2;


-----------------
CREATE TABLE dbo.subjects3
(
	subject_id INT IDENTITY,
	subject_name VARCHAR(20),
	global_id UNIQUEIDENTIFIER DEFAULT NEWSEQUENTIALID(),
	CONSTRAINT pk_subjects3_subject_id PRIMARY KEY (subject_id)
);
GO

INSERT INTO dbo.subjects3 (subject_name)
	VALUES ('Biology'),
	       ('Physics'),
		   ('English');
GO

SELECT *
FROM dbo.subjects3;
------------

SELECT NEWID() AS new_id;

SELECT * FROM dbo.dept;

-- #TASK Delete Statement
DELETE FROM dbo.emp where emp_id = 1; 

-- The TRUNCATE TABLE Statement can be used to delete all rows in a table
	-- Example
		TRUNCATE TABLE dbo.emp; 

-- #DROP TABLE Statement
-- DROP TABLE database_name.schema_name.table_name; 

DROP TABLE SAMPLEDB.dbo.dept;

ALTER TABLE dbo.emp
	DROP CONSTRAINT fk_emp_dept_id;

DROP TABLE IF EXISTS dbo.dept;

-- TRANSACTION

--	A transaction is a single unit of work, sometimes made up of multiple operations.
--	For example, a transaction could consist of one or more SQL statements which change 
--	data in a table. 

-- Begin a new Transaction
BEGIN TRANSACTION;

-- Declare a variable called @new_product_id that will hold the new product_id value:
DECLARE @new_product_id INT; 

-- Insert the new product. The product_id value is generated by the IDENTITY property:
INSERT INTO oes.products (product_name, category_id, list_price, discontinued)
	VALUES ('PBX Printer', 7, 45.99, 0);

-- The SCOPE_IDENTITY() function returns the last value inserted into the IDENTITY column:
	SET @new_product_id = SCOPE_IDENTITY();

-- Insert the inventory information for the new product:
INSERT INTO oes.inventories (product_id, warehouse_id, quantity_on_hand)
	VALUES (@new_product_id, 1, 100),
			(@new_product_id, 4, 35);

-- Commmit the changes. The commit will only happen if both insert statements are successful:
COMMIT TRANSACTION; 

-- #STORED PROCEDURES

-- A stored procedure is simply some SQL code that is saved in the database which can be executed; 
-- Results in less network traffic. 

CREATE PROCEDURE proc_name
(@parameter1 data_type, @parameter2 data_type)
AS

BEGIN
	sql_statements..
END;

EXECUTE proc_name
	@param1 = param1_value;
	@param2 = param2_value;


----

SELECT 
	e.employee_id,
	e.first_name,
	e.last_name,
	d.department_name
FROM
	hcm.employees e 
INNER JOIN hcm.departments d
ON e.department_id = d.department_id
WHERE d.department_name = 'Finance';

-- Stored procedure with one input parameter:
	CREATE PROCEDURE hcm_getEmployeesByDepartment (@department_name VARCHAR(50))
	AS
	SELECT 
		e.employee_id,
		e.first_name,
		e.last_name,
		d.department_name
	FROM
		hcm.employees e 
	INNER JOIN hcm.departments d
	ON e.department_id = d.department_id
	WHERE d.department_name = @department_name;

EXECUTE hcm_getEmployeesByDepartment @department_name = 'Finance';
EXECUTE hcm_getEmployeesByDepartment 'Finance';
EXEC hcm_getEmployeesByDepartment 'Finance';

EXECUTE hcm_getEmployeesByDepartment @department_name = 'Sales';


-- SELECT query that selects customers who contain the string '34th' in their street address

SELECT 
	customer_id,
	first_name,
	last_name,
	email,
	street_address
FROM 
	oes.customers
WHERE
	street_address LIKE '%34th%';

CREATE PROCEDURE oes.searchCustomerByStreetAddress
(
	@street_address_search VARCHAR(50)
)
AS
SELECT 
	customer_id,
	first_name,
	last_name,
	email,
	street_address
FROM 
	oes.customers
WHERE
	street_address LIKE '%' + @street_address_search + '%';

EXEC oes.searchCustomerByStreetAddress @street_address_search = '34th';

-- SELECT query that selects customers from Australia who have gmail email address:
SELECT
	cu.customer_id,
	cu.first_name,
	cu.last_name,
	cu.email,
	ct.country_name
FROM 
	oes.customers cu
INNER JOIN 
	hcm.countries ct
ON cu.country_id = ct.country_id
WHERE 
	ct.country_name = 'Australia'
AND cu.email LIKE '%gmail.com';
	
CREATE PROCEDURE oes.getCustomersByCountryEmail
(
	@country VARCHAR(50),
	@email_domain VARCHAR(320)
)
AS

BEGIN

SELECT
	cu.customer_id,
	cu.first_name,
	cu.last_name,
	cu.email,
	ct.country_name
FROM 
	oes.customers cu
INNER JOIN 
	hcm.countries ct
ON cu.country_id = ct.country_id
WHERE 
	ct.country_name = @country
AND cu.email LIKE '%' + @email_domain;

END

EXEC oes.getCustomersByCountryEmail @country = 'Australia', @email_domain = '@gmail.com';

SELECT 
	employee_id,
	first_name,
	last_name,
	department_id,
	salary
FROM
	hcm.employees
WHERE 
	salary >= 80000
AND salary <= 100000;

CREATE PROCEDURE hcm.getEmployeesBySalaryRange
(
	@min_salary DECIMAL(12,2),
	@max_salary DECIMAL(12,2)
)
AS
SELECT 
	employee_id,
	first_name,
	last_name,
	department_id,
	salary
FROM
	hcm.employees
WHERE 
	salary >= @min_salary
AND salary <= @max_salary;

EXEC hcm.getEmployeesBySalaryRange @min_salary = 80000, @max_salary = 100000;

-- optinal parameters

ALTER PROCEDURE hcm.getEmployeesBySalaryRange
(
	@min_salary DECIMAL(12,2) = 0,
	@max_salary DECIMAL(12,2) = 99999999
)
AS
SELECT 
	employee_id,
	first_name,
	last_name,
	department_id,
	salary
FROM
	hcm.employees
WHERE 
	salary >= @min_salary
AND salary <= @max_salary;

-- select employees between default salary range i.e. @min_salary=0 and @max_salary=99999999:
EXEC hcm.getEmployeesBySalaryRange

-- select employees with min salary of 90000 and default max salary:
EXEC hcm.getEmployeesBySalaryRange @min_salary = 90000

-- select employees with max salary of 150000 and default min salary:
EXEC hcm.getEmployeesBySalaryRange @max_salary = 150000

-- output parameters

SELECT * FROM dbo.parks2;

CREATE PROCEDURE dbo.addNewPark
(
	@park_name VARCHAR(50),
	@entry_free DECIMAL(6,2) = 0,
	@new_park_id INT OUT
)
AS

-- setting the NOCOUNT option to ON means that SQL won't show messages reporting how many rows were affected by DML statements
SET NOCOUNT ON;

-- if XACT_ABORT setting is OFF then not all run-time errors will cause the transaction to rollback.
-- by setting XACT_ABORT setting ON then all errors will cause the transaction to rollback and execution of the code to abort:

SET XACT_ABORT ON;

BEGIN

INSERT INTO dbo.parks2 (park_name, entry_free)
	VALUES (@park_name, @entry_free);

-- setting the @new_park_id output parameter to the value returned by the SCOPE_IDENTITY function
-- SCOPE_IDENTITY() returns the IDENTITY value of the last insert that ocurred in the same scope

SELECT @new_park_id = SCOPE_IDENTITY();

END

-- to execute a stored procedure with an output parameter(s), we must 
-- declare a variable to store the value returned by the output parameter: 

DECLARE @ParkID INT;

EXEC dbo.addNewPark @park_name = 'Green Meadows 2', @entry_free = 6, @new_park_id = @ParkID OUT;

SELECT @ParkID; 

select * from dbo.parks2